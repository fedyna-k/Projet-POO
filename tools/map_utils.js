/**
 * @file Allow to convert a Tiled generated map file to a .MAPDATA file.
 * @author Kevin Fedyna <https://github.com/fedyna-k/>
 * @version 1.0.0
 */

/**
 * @typedef MapData
 * @property {number} width The width in Tile Units (tu)
 * @property {number} height The height in Tile Units (tu)
 * @property {number} tilesize The tilesize in pixels
 * @property {{firstId: number, source: string}[]} tilesets The tilesets described by their first used id and source path
 * @property {{name: string, data: string}[]} layers The layers described by their name and data
 */


const fs = require("fs");
const process = require("process");

const HELP_MESSAGE = `
\x1b[1m\x1b[93m                +----------------------+
                |     map_utils.js     |
                +----------------------+\x1b[0m

\x1b[94mauthor:     \x1b[3mKevin Fedyna\x1b[0m
\x1b[94mversion:    \x1b[3m1.0.0\x1b[0m
\x1b[94mlast-edit:  \x1b[3m27.11.2023\x1b[0m

Allow to create .MAPDATA files from Tiled autogenerated JSON.

\x1b[1m\x1b[31mImportant\x1b[0m : The tilesets are named by Tiled, you should
            check the path and names before submitting
            the file to the game.

\x1b[3mNote that the file will remove all content in previous file
before creating new file.\x1b[0m

\x1b[94m\x1b[1mHow to use :\x1b[0m

    node map_utils <filename>

\x1b[94m\x1b[1mOptions :\x1b[0m

    -o <output>     Allow to give custom name to output file
    --help          Displays this help message
`;


/**
 * Read file created by Tiled and return MapData object corresponding to the file.
 * @param {string} fileName The file created by Tiled in JSON format
 * @returns {MapData} A MapData object that allows .MAPDATA file creation
 */
const readFile = fileName => {
    console.log(`\x1b[93mReading file ${fileName}...\x1b[0m`);

    // Read file and parse data to JSON
    const raw = JSON.parse(fs.readFileSync(fileName, "utf-8"));

    return {
        // Meta data
        width: raw.width,
        height: raw.height,
        tilesize: (raw.tilewidth == raw.tileheight) ? raw.tileheight : null,
        // Index data
        tilesets: raw.tilesets.map(ts => ({
            firstId: ts.firstgid,
            source: ts.source
        })),
        // Map data
        layers: raw.layers.map(l => ({
            name: l.name.toUpperCase().replace(/[^A-Z]/g, ""),
            data: l.data.join(",")
        }))
    };
}


/**
 * Create the .MAPDATA file from parsed data
 * @param {MapData} data A MapData object that allows .MAPDATA file creation
 * @param {string} outputName The generated file name
 */
const writeFile = (data, outputName=".MAPDATA") => {
    console.log(`\x1b[3mReseting file ${outputName}...\x1b[0m`);
    // Clear previous file
    if (fs.existsSync(outputName)) fs.unlinkSync(outputName);

    console.log(`\x1b[93mWriting in file ${outputName}...\x1b[0m`);
    // Write meta data
    fs.appendFileSync(outputName, ":META-DATA:\n\n");
    fs.appendFileSync(outputName, `WIDTH - ${data.width}\n`);
    fs.appendFileSync(outputName, `HEIGHT - ${data.height}\n`);
    fs.appendFileSync(outputName, `TILESIZE - ${data.tilesize}\n`);

    // Write index data
    fs.appendFileSync(outputName, "\n:INDEX-DATA:\n\n");
    for (let tileset of data.tilesets) {
        fs.appendFileSync(outputName, `${tileset.firstId} - ${tileset.source}\n`)
    }

    // Write map data
    fs.appendFileSync(outputName, "\n:MAP-DATA:\n\n");
    for (let layer of data.layers) {
        fs.appendFileSync(outputName, `#${layer.name}# ${layer.data}\n\n`)
    }

    console.log(`\x1b[1m\x1b[93mFinished !\x1b[0m`);
}


/**
 * ======================
 *   Main file function
 * ======================
 */

if (process.argv.indexOf("--help") != -1) {
    console.log(HELP_MESSAGE);
    process.exit(0);
}

if (process.argv.length == 3) {
    // Read file
    let raw = readFile(process.argv[2]);

    // Check for error in parsed data
    if (raw.tilesize == null) {
        throw SyntaxError("The given file is using non-square tiles.");
    }

    // Write file
    writeFile(raw);
}

if (process.argv.length == 5) {
    let output = process.argv[2] == "-o" ? process.argv[3] : process.argv[4];

    // Read file
    let raw = readFile(process.argv[2] == "-o" ? process.argv[4] : process.argv[2]);

    // Check for error in parsed data
    if (raw.tilesize == null) {
        throw SyntaxError("The given file is using non-square tiles.");
    }

    // Write file
    writeFile(raw, output);
}